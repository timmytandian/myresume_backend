name: backend CI/CD
run-name: ACTOR ${{ github.actor }} - BRANCH ${{ github.ref_name }} - EVENT ${{ github.event_name }}
on: [workflow_dispatch, push]
jobs:
  InstallPoetry-RunPytest-BuildLambdaLayer:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #  check-out repo and preview the path
      #----------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run pwd and ls
        run: |
          pwd
          ls
      #----------------------------------------------
      #  initialize variable
      #----------------------------------------------
      - name: Set variable value
        id: set_PROJECT_NAME
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
      - name: Use variable value
        id: get_PROJECT_NAME
        run: |
          printf 'the project name is: %s\n' "$PROJECT_NAME"
      - name: Check repository's variable
        id: check_DYNAMODB_TABLE_NAME
        run: |
          echo "the value of DYNAMODB_TABLE_NAME is ${{ vars.DYNAMODB_TABLE_NAME }}"
      #----------------------------------------------
      #  install python & configure poetry
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: |
          pwd
          ls
          poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          pwd
          ls
          poetry env list
          poetry env list --full-path
          poetry env info --executable
          ls .venv/bin
          source .venv/bin/activate
          python -m pytest tests/
      
      #----------------------------------------------
      #              build lambda layer
      #----------------------------------------------
      - name: Build wheel package
        run: | 
          pwd
          poetry build --format wheel
          ls
      - name: Make lambda layer folder
        run: mkdir -p aws_layer/python/lib/python3.11/site-packages
      - name: Packaging using pip install
        run: |
          poetry run pip install --upgrade --only-binary :all: --platform linux_x86_64 --target aws_layer/python/lib/python3.11/site-packages dist/*.whl
      - name: Compress into zip
        run: |
          cd aws_layer; zip -r9 artifact.zip . -x '*.pyc'
          cd ..
          pwd
          ls
      - name: Upload the artifact.zip for the next job
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: aws_layer/artifact.zip

      #----------------------------------------------
      #              closing
      #----------------------------------------------
      - run: echo "üçè This job's status is ${{ job.status }}."
  
  PublishLambdaLayer:
    runs-on: ubuntu-latest
    needs: InstallPoetry-RunPytest-BuildLambdaLayer

    steps:
      #----------------------------------------------
      #  Artifact download, publish to AWS Lambda Layer
      #----------------------------------------------
      - name: Download the artifact.zip
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer
      - name: Publish Layer
        uses: theserverfault/aws-lambda-layer-release-action@v0.0
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          layer_name: myresume_backend_layer_from_github_action
          archive: artifact.zip
          architectures: x86_64
          runtimes: python3.11
          s3_bucket: myresume-backend-layers-bucket
          functions: dynamodb-resume_visitor-api_http-counts