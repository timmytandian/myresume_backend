name: backend CI/CD
run-name: ACTOR ${{ github.actor }} - BRANCH ${{ github.ref_name }} - EVENT ${{ github.event_name }}
on: [workflow_dispatch, push]
jobs:
  InstallPoetry-RunPytest-BuildLambdaLayer:
    runs-on: ubuntu-latest
    outputs:
      dependencies-changed-flag: ${{ steps.path-filter.outputs.poetlock }}
    
    steps:
      #----------------------------------------------
      #  check-out repo and preview the path
      #----------------------------------------------
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run pwd and ls
        run: |
          pwd
          ls
      #----------------------------------------------
      #  initialize variable
      #----------------------------------------------
      - name: Set variable value
        id: set_PROJECT_NAME
        run: |
          echo "PROJECT_NAME=${GITHUB_REPOSITORY#*/}" >> "$GITHUB_ENV"
      - name: Use variable value
        id: get_PROJECT_NAME
        run: |
          printf 'the project name is: %s\n' "$PROJECT_NAME"
      - name: Check repository's variable
        id: check_DYNAMODB_TABLE_NAME
        run: |
          echo "the value of DYNAMODB_TABLE_NAME is ${{ vars.DYNAMODB_TABLE_NAME }}"
      #----------------------------------------------
      #  install python & configure poetry
      #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: |
          pwd
          ls
          poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          pwd
          ls
          poetry env list
          poetry env list --full-path
          poetry env info --executable
          ls .venv/bin
          source .venv/bin/activate
          python -m pytest tests/
      
      #----------------------------------------------
      #              build dependencies lambda layer
      #----------------------------------------------
      - name: Build wheel package
        run: |
          pwd
          poetry build --format wheel
          ls
      - name: Make lambda layer folder
        run: mkdir -p aws_layer/python/lib/python3.11/site-packages
      - name: Packaging using pip install
        run: |
          poetry run pip install --upgrade --only-binary :all: --platform linux_x86_64 --target aws_layer/python/lib/python3.11/site-packages dist/*.whl
      - name: Compress into zip
        run: |
          cd aws_layer; zip -r9 artifact.zip . -x '*.pyc'
          cd ..
          pwd
          ls
      - name: Upload the artifact.zip for the next job
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: aws_layer/artifact.zip

      #----------------------------------------------
      #  Publish main code to S3
      #----------------------------------------------
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Deploy modified file
        run: |
          # Constants
          S3_BUCKET=${{ vars.S3_BUCKET }}
          S3_KEY="code.zip"
          LAMBDA_FUNCTION_NAME=${{ vars.LAMBDA_FUNCTION_NAME }}
          
          # Download the existing zip from S3
          aws s3 cp s3://$S3_BUCKET/$S3_KEY existing_lambda.zip
          
          # Unzip the existing package
          unzip existing_lambda.zip -d lambda_env
          
          # Copy only the modified .py files from the commit into the unzipped directory
          # This will maintain their directory structure.
          for file in $(git diff-tree --no-commit-id --name-only -r HEAD); do
              if [[ $file == *.py ]]; then
                  # Create the directory structure in lambda_env for the modified file
                  mkdir -p lambda_env/$(dirname $file)
                  # Copy the modified file
                  cp $file lambda_env/$file
                  # Print what you've done with the file
                  echo "Copied $file to lambda_env/$file"
                  echo "Content of $file after copying:"
                  cat lambda_env/$file
              fi
          done
          
          # Zip the directory again
          cd lambda_env
          zip -r ../updated_lambda.zip .
          cd ..
          
          # Upload the updated zip to S3
          aws s3 cp updated_lambda.zip s3://$S3_BUCKET/$S3_KEY
          
          # Update Lambda function code
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --s3-bucket $S3_BUCKET --s3-key $S3_KEY
          
          # Cleanup
          rm -r lambda_env
          rm existing_lambda.zip updated_lambda.zip
      

      - uses: dorny/paths-filter@v3
        id: path-filter
        with:
          filters: |
            poetlock:
              - 'poetry.lock'
      #----------------------------------------------
      #              closing
      #----------------------------------------------
      - run: echo "üçè This job's status is ${{ job.status }}."
  
  DeployLambdaLayer:
    runs-on: ubuntu-latest
    needs: InstallPoetry-RunPytest-BuildLambdaLayer
    if: ${{ needs.InstallPoetry-RunPytest-BuildLambdaLayer.outputs.dependencies-changed-flag == 'true' }}
    steps:
      #----------------------------------------------
      #  Artifact download, publish to AWS Lambda Layer
      #----------------------------------------------
      - name: Download the artifact.zip
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Deploy zip as new layer version
        run: |
          aws lambda publish-layer-version --layer-name myresume_backend_layer_from_github_action --description "A layer published from github action myresume_backend" --zip-file fileb://artifact.zip --compatible-runtimes python3.11
          LAYER_VERSION_ARN=$(aws lambda list-layer-versions --layer-name myresume_backend_layer_from_github_action --query 'LayerVersions[0].LayerVersionArn' --output text)
          aws lambda update-function-configuration --function-name ${{ vars.LAMBDA_FUNCTION_NAME }} --layers $LAYER_VERSION_ARN 